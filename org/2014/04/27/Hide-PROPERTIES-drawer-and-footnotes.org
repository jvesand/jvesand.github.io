*** Hide PROPERTIES drawer and footnotes
:PROPERTIES:
:date:     2014/04/27 22:54:50
:updated:  2014/04/27 22:54:50
:END:

Combination of lawlist's answers from stackoverflow: [[http://stackoverflow.com/questions/15258055/in-org-mode-how-to-fold-hide-footnotes/21594242#21594242][hiding footnotes]] and [[http://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode][hiding properties drawer]]. Modified to fit my needs.

**** Re-hide all drawers, footnotes or html blocks after a visibility state change

#+BEGIN_SRC emacs-lisp
(defalias 'org-cycle-hide-drawers 'lawlist-block-org-cycle-hide-drawers)

(defun lawlist-block-org-cycle-hide-drawers (state)
  "Re-hide all drawers, footnotes or html blocks after a visibility state change."
  (when
    (and
      (derived-mode-p 'org-mode)
      (not (memq state '(overview folded contents))))
    (save-excursion
      (let* (
          (globalp (memq state '(contents all)))
          (beg (if globalp (point-min) (point)))
          (end
            (cond
              (globalp
                (point-max))
              ((eq state 'children)
                (save-excursion (outline-next-heading) (point)))
              (t (org-end-of-subtree t)) )))
        (goto-char beg)

        ;; Re-hide footnotes. This messes with properties drawer.
        ;; If it finds a footnote it doesn't hide the drawer.
        ;; Also, truncates footnotes if several on same line.
        (while
          (re-search-forward
;            ".*\\[fn\\|^\\#\\+BEGIN_HTML.*$\\|^[ \t]*:PROPERTIES:[ \t]*$" end t)
            ".*\\[fn\\|^\\#\\+BEGIN_HTML.*$\\|^\\*\\*.*$" end t)
          (lawlist-org-flag t))
        ))))
#+END_SRC

**** Local org-cycling action (for drawers and footnotes) :unclear:deactivated:
:PROPERTIES:
:tangle:   no
:END:

Try this out. That is, without cycling of properties and footnotes?

# #+BEGIN_SRC emacs-lisp
(defalias 'org-cycle-internal-local 'lawlist-block-org-cycle-internal-local)

(defun lawlist-block-org-cycle-internal-local ()
  "Do the local cycling action."
  (let ((goal-column 0) eoh eol eos has-children children-skipped struct)
    (save-excursion
      (if (org-at-item-p)
        (progn
          (beginning-of-line)
          (setq struct (org-list-struct))
          (setq eoh (point-at-eol))
          (setq eos (org-list-get-item-end-before-blank (point) struct))
          (setq has-children (org-list-has-child-p (point) struct)))
        (org-back-to-heading)
        (setq eoh (save-excursion (outline-end-of-heading) (point)))
        (setq eos (save-excursion (1- (org-end-of-subtree t t))))
        (setq has-children
          (or
            (save-excursion
              (let ((level (funcall outline-level)))
                (outline-next-heading)
                (and
                  (org-at-heading-p t)
                  (> (funcall outline-level) level))))
            (save-excursion
              (org-list-search-forward (org-item-beginning-re) eos t)))))
      (beginning-of-line 2)
      (if (featurep 'xemacs)
        (while
            (and
              (not (eobp))
              (get-char-property (1- (point)) 'invisible))
          (beginning-of-line 2))
        (while
            (and
              (not (eobp))
              (get-char-property (1- (point)) 'invisible))
          (goto-char (next-single-char-property-change (point) 'invisible))
          (and
            (eolp)
            (beginning-of-line 2))))
      (setq eol (point)))
    (cond
      ((= eos eoh)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'empty))
        (org-unlogged-message "EMPTY ENTRY")
        (setq org-cycle-subtree-status nil)
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (if (outline-invisible-p)
            (org-flag-heading nil))))
      ((and
          (or
            (>= eol eos)
            (not (string-match "\\S-" (buffer-substring eol eos))))
          (or
            has-children
            (not (setq children-skipped
              org-cycle-skip-children-state-if-no-children))))
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'children))
        (if (org-at-item-p)
          ;; then
          (org-list-set-item-visibility (point-at-bol) struct 'children)
          ;; else
          (org-show-entry)
          (org-with-limited-levels (show-children))
          (when (eq org-cycle-include-plain-lists 'integrate)
            (save-excursion
              (org-back-to-heading)
              (while (org-list-search-forward (org-item-beginning-re) eos t)
                (beginning-of-line 1)
                (let* (
                    (struct (org-list-struct))
                    (prevs (org-list-prevs-alist struct))
                    (end (org-list-get-bottom-point struct)))
                  (mapc (lambda (e) (org-list-set-item-visibility e struct 'folded))
                    (org-list-get-all-items (point) struct prevs))
                  (goto-char (if (< end eos) end eos)))))))
        (org-unlogged-message "CHILDREN")
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (if (outline-invisible-p)
            (org-flag-heading nil)))
        (setq org-cycle-subtree-status 'children)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'children)))
      ((or
          children-skipped
          (and
            (eq last-command this-command)
            (eq org-cycle-subtree-status 'children)))
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'subtree))
        (outline-flag-region eoh eos nil)
        (org-unlogged-message
        (if children-skipped
          "SUBTREE (NO CHILDREN)"
          "SUBTREE"))
        (setq org-cycle-subtree-status 'subtree)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'subtree)))
      ((eq org-cycle-subtree-status 'subtree)
        (org-show-subtree)
        (message "ALL")
        (setq org-cycle-subtree-status 'all))
      (t
        (run-hook-with-args 'org-pre-cycle-hook 'folded)
        (outline-flag-region eoh eos t)
        (org-unlogged-message "FOLDED")
        (setq org-cycle-subtree-status 'folded)
        (unless (org-before-first-heading-p)
        (run-hook-with-args 'org-cycle-hook 'folded))))))
#+END_SRC

**** TODO Regexp for regions to flag for invisibility (called on state change)
:PROPERTIES:
:tangle:   no
:END:

From lawlist:
Instead of moving forward one character at a time (forward-char 1), you may wish to consider going to the end of the line and using re-search-backward.  If you have a hit with re-search-backward, you are already looking your beginning footnote regexp.  That way the code only stops to evaluate whether to hide / unhide the footnote as many times as the footnotes appear.  The way you have written it with (forward-char 1), the evaluation occurs once every character -- i.e., if the line has 200 characters, the code will be evaluated 200 times.

#+BEGIN_SRC emacs-lisp
(defun lawlist-org-flag (flag)
  "When FLAG is non-nil, hide any of the following:  html code block;
footnote; or, the properties drawer.  Otherwise make it visible."
  (save-excursion
    (beginning-of-line 1)
    (cond
     ((looking-at "^\\*\\*.*$")
      (let* ((begin (match-end 0)))
        (if (re-search-forward
             "^[ \t]*:END:"
             (save-excursion (outline-next-heading) (point)) t)
            (outline-flag-region begin (point-at-eol) flag)
          ;; Since I check every single node with atleast two asteriks, remove:
          ;; (user-error ":END: line missing at position %s" b)
          )))
     ((looking-at "^\\#\\+BEGIN_HTML.*$")
      (let* ((begin (match-end 0)))
        (if (re-search-forward 
             "^\\#\\+END_HTML.*$"
             (save-excursion (outline-next-heading) (point)) t)
            (outline-flag-region begin (point-at-eol) flag)
          (user-error "Error beginning at point %s." begin)))))

    (while (< (point) (point-at-eol))
      (forward-char 1)
      (cond
       ((looking-at "\\[fn::")
        (let* ((begin (match-end 0))
               end-footnote)
          (if (re-search-forward 
               "\\]"
               (save-excursion (outline-next-heading) (point)) t)
              (progn
                (setq end-footnote (point))
                (outline-flag-region begin end-footnote flag))
            (user-error "Error beginning at point %s." begin))))))
      ))
#+END_SRC

**** Regexp for regions to flag for invisibility (called manually) :deactivated:
:PROPERTIES:
:tangle:   no
:END:

Keeping the manual control to lines for now, and that works with the normal one.

# #+BEGIN_SRC emacs-lisp
(defun lawlist-manual-org-flag (flag)
 "When FLAG is non-nil, hide any of the following: html code block;
footnote; or, the properties drawer. Otherwise make it visible."
 (save-excursion
   (cond
     ((looking-at "\\[fn::")
       (let* (
         (begin (match-end 0))
         end-footnote)
         (if (re-search-forward "\\]"
               (save-excursion (outline-next-heading) (point)) t)
           (progn
             (setq end-footnote (point))
             (outline-flag-region begin end-footnote flag))
           (user-error "Error beginning at point %s." begin))))
     ((looking-at "^\\#\\+BEGIN_HTML.*$\\|^[ \t]*:PROPERTIES:[ \t]*$")
       (let* ((begin (match-end 0)))
         (if (re-search-forward "^\\#\\+END_HTML.*$\\|^[ \t]*:END:"
               (save-excursion (outline-next-heading) (point)) t)
           (outline-flag-region begin (point-at-eol) flag)
           (user-error "Error beginning at point %s." begin)))))))
#+END_SRC

**** Toggle visibility of footnotes on a line

#+BEGIN_SRC emacs-lisp
(defun lawlist-toggle-block-visibility ()
"For this function to work, the cursor must be on the same line as the regexp."
(interactive)
(if
    (save-excursion
      (beginning-of-line 1)
      (looking-at ;; for individual footnotes, remove .* and put manual func
       ".*\\[fn::\\|^\\#\\+BEGIN_HTML.*$\\|^[ \t]*:PROPERTIES:[ \t]*$"))
    (lawlist-org-flag (not (get-char-property (match-end 0) 'invisible)))
  (message "Sorry, you are not on a line containing the beginning regexp.")))
#+END_SRC

**** Python: regexp for regions to flag for invisibility

#+BEGIN_SRC emacs-lisp
(defun lawlist-python-org-flag (flag)
  "When FLAG is non-nil, hide any of the following:  html code block;
footnote; or, the properties drawer.  Otherwise make it visible."
  (save-excursion
    (beginning-of-buffer)
    (beginning-of-line 1)
    (while (< (point) (point-max))
      (forward-char 1)
      (cond
       ((looking-at "\\[fn::")
        (let* ((begin (match-end 0))
               end-footnote)
          (if (re-search-forward 
               "\\]"
               (save-excursion (end-of-buffer) (point)) t)
              (progn
                (setq end-footnote (point))
                (outline-flag-region begin end-footnote flag))
            (user-error "Error beginning at point %s." begin))))))
      ))
#+END_SRC

**** Python: toggle visibility of ALL (in a block) footnotes

#+BEGIN_SRC emacs-lisp
(defun lawlist-toggle-python-org-block-visibility ()
"For this function to work, the cursor must be on the same line as the regexp."
(interactive)
(if
    (save-excursion
      (beginning-of-line 1)
      (looking-at ;; for individual footnotes, remove .* and put manual func
       ".*\\[fn::"))
    (lawlist-python-org-flag (not (get-char-property (match-end 0) 'invisible)))
  (message "Sorry, you are not on a line containing the beginning regexp.")))
#+END_SRC
